const lendoLocal = () => {
  const lendo = localStorage.getItem('cartItems');
  const localDoCarrinho = document.querySelector('.cart__items');
  localDoCarrinho.innerHTML = lendo;
  const listaDeItens = document.querySelector('.cart__item');
  listaDeItens.forEach((item) => {
    item.addEventListener('click', cartItemClickListener);
  });
  if (localStorage.totalPrice) {
    const loadPrice = localStorage.getItem('totalPrice');
    const localPrice = document.querySelector('.total-price');
    localPrice.innerText = loadPrice;
  }
};

const adicionaAoCarrinho = async (id) => {
  await fetch(`https://api.mercadolibre.com/items/${id}`)
  .then(resposta => resposta.json())
  .then((resposta) => {
    const { title, price } = resposta;
    const lista = createCartItemElement({ sku: id, name: title, salePrice: price });
    const listaCarrinho = document.querySelector('.cart__items');
    listaCarrinho.appendChild(lista);
    itensLocais(listaCarrinho.innerHTML);
  });
};

const lerProduto = async () => { // funcao que pega a lista de produtos da api e printa na página
  await fetch(url + produto) // pegando a url para a requisição
    .then(resposta => resposta.json())
    .then((resultado) => {
      resultado.results.forEach((produtos) => { // vamos percorrer todo o objeto
        const { id, title, thumbnail } = produtos;  // separando o que eu quero do objeto
        const item = createProductItemElement({ sku: id, name: title, image: thumbnail });
        item.addEventListener('click', (event) => { // oque fazer quando clicar
          const idDoProduto = getSkuFromProductItem(event.target.parentElement);
          adicionaAoCarrinho(idDoProduto);
        });
        const sessao = document.querySelector('.items'); // selecionando a tag html
        sessao.appendChild(item); // adicionando
      });
      document.querySelector('.container').removeChild(document.querySelector('.loading'));
    })
    .catch((error) => { // se der erro
      console.log(msnErroRequisicao); // mensagem malcriada
    });
};

const itensLocais = (item) => {
  localStorage.setItem('cartItems', item);
  const localPrice = document.querySelector('.total-price');
  localStorage.setItem('totalPrice', localPrice.innerText);
};

function somarValores(valor) {
  const localPrice = document.querySelector('.total-price');
  const priceNow = parseFloat(localPrice.innerText);
  const priceParam = parseFloat(valor);
  const summedPrice = Math.round(((priceNow + priceParam) * 100) / 100).toFixed(2);
  localPrice.innerText = summedPrice;
}

function subTotal(valor) {
  const precoTexto = document.querySelector('.total_price');
  const precoInteiro = parseFloat(precoTexto.innerText);
  const converterValor = valor.split('$');
  const preco = parseFloat(converterValor[1]);
  const total = Math.round(((precoInteiro - preco) * 100) / 100).toFixed(2);
  precoTexto.innerText = total;  console.table(listaDeItens);
}

function cartItemClickListener(event) {
  const valor = event.target.innerText;
  subTotal(valor);
  event.target.remove();
  const listaCart = document.querySelector('.cart__items');
  itensLocais(listaCart.innerHTML);
}

const limparCarrinho = () => {
  const btnLimpar = document.querySelector('.empty_cart');
  btnLimpar.addEventListener('click', () => {
    const lista = document.querySelector('.cart__items');
    lista.innerHTML = '';
    localStorage.clear();
    const precoTotal = document.querySelector('.total_price');
    precoTotal.innerText = '0.00';
  });
};



4. Carregue o carrinho de compras através do LocalStorage ao iniciar a página
Ao carregar a página, o estado atual do carrinho de compras deve ser carregado 
do LocalStorage. Para que isso funcione, o carrinho de compras deve ser salvo 
no LocalStorage, ou seja, todas as adições e remoções devem ser abordadas para 
que a lista atual seja salva.

5. Some o valor total dos itens do carrinho de compras de forma assíncrona
Cada vez que se adicionar um item ao carrinho de compras será necessário somar seus valores e apresentá-los na página principal do projeto. Não queremos que essa soma, no entanto, impacte no carregamento da página. Devemos, portanto, fazer essa soma de forma assíncrona. Use async/await para fazer isso. O elemento que tem como filho o preço total dos itens do carrinho deve ter, obrigatóriamente, a classe total-price.

6. Botão para limpar carrinho de compras
Crie um botão para remover todos os itens do carrinho de compras. Ele deve, obrigatóriamente, ter a classe empty-cart.

7. Adicionar um texto de "loading" durante uma requisição à API
Uma requisição à API gasta um tempo e durante ele, ficamos sem saber se está tudo certo ou se algo deu errado. Normalmente é utilizada alguma forma para mostrar que a requisição está em andamento. Mostre a palavra "loading..." em alguma lugar da página apenas durante a requisição à API. O elemento mostrado durante o carregamento da página deve, obrigatóriamente, ter a classe loading.